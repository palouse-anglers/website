---
title: "Maps"
execute: 
  echo: false
  warning: false
---

```{r}
library(leaflet)
library(leaflet.providers)
library(leaflet.extras)
library(tidyverse)
library(geojsonsf)
library(sf)
```

```{r}
#| warning: false

watersheds <- data.frame(
  Name=c("St Joe","NF CDA","Lochsa","Grande Ronde","NF Clearwater"),
  HUC8=c("17010304","17010301","17060303","17060106","17060308" )) %>%
  mutate(url=paste0("https://hydro.nationalmap.gov/arcgis/rest/services/wbd/MapServer/4/query?where=HUC8+%3D+%27",HUC8,"%27+&text=&objectIds=&time=&geometry=&geometryType=esriGeometryPolygon&inSR=&spatialRel=esriSpatialRelContains&distance=&units=esriSRUnit_Foot&relationParam=&outFields=&returnGeometry=true&returnTrueCurves=false&maxAllowableOffset=&geometryPrecision=&outSR=&havingClause=&returnIdsOnly=false&returnCountOnly=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&returnZ=false&returnM=false&gdbVersion=&historicMoment=&returnDistinctValues=false&resultOffset=&resultRecordCount=&returnExtentOnly=false&datumTransformation=&parameterValues=&rangeValues=&quantizationParameters=&featureEncoding=esriDefault&f=geojson"),
         sf=map(url,~geojson_sf(.x)) %>% 
           set_names(Name)
         )


map_maker <- function(sf_map){
  
opt <- leaflet::WMSTileOptions(format="image/png32", version="1.3.0", minZoom=3, maxZoom=16,transparent = TRUE)

 map <- leaflet() %>%
   addTiles() %>%
  addWMSTiles(baseUrl = "https://basemap.nationalmap.gov/arcgis/services/USGSHydroCached/MapServer/WMSServer?",layers="0",options = opt,group="Hydro") %>%
 addProviderTiles("Esri.WorldImagery", group="Imagery") %>%
  addProviderTiles("CartoDB.DarkMatter", group="Dark")%>%
 addProviderTiles("Esri.NatGeoWorldMap", group="Topo") %>%
 addProviderTiles("OpenStreetMap", group="Street") %>%
 addPolygons(data= sf_map,group = sf_map$name,fillOpacity = 0) %>%
  addSearchOSM() %>%
  addLayersControl(overlayGroups = c(sf_map$name,"Hydro"),
baseGroups = c("Imagery","Dark","Topo","Street"))%>%
   leaflet.extras::addFullscreenControl() %>%
   leafem::addMouseCoordinates() %>% 
   hideGroup("Hydro") 


 #Function to add markers on map click
 addMarkersOnMapClick <- 'function(e) {
   var map = this;
   var coord = e.latlng;
   var marker = L.marker(coord).addTo(map);
   marker.bindPopup("Latitude: " + coord.lat.toFixed(4) + "<br>Longitude: " + coord.lng.toFixed(4)).openPopup();
 }'
  
 # Function to add markers with custom labels
 addMarkersOnMapClick <- 'function(e) {
   var map = this;
   var coord = e.latlng;
   var marker = L.marker(coord, {
     icon: L.divIcon({
       className: "custom-marker-label",
       html: "Marker ID: " + map.markerID + "<br>Latitude: " + coord.lat.toFixed(4) + "<br>Longitude: " + coord.lng.toFixed(4)
   })
 }).addTo(map);
 map.markerID++;
}'

# Create a button to toggle adding markers
addMarkersButton <- 'L.easyButton("fa-map-marker", function(btn, map) {
   if (map.addingMarkers) {
     map.addingMarkers = false;
     btn.button.style.backgroundColor = "white";
     map.off("click", addMarkersOnMapClick);
   } else {
     map.addingMarkers = true;
     btn.button.style.backgroundColor = "lightblue";
     map.on("click", addMarkersOnMapClick);
   }
 }, "Add Markers")'
 
 # Initialize the "addingMarkers" flag to false
 map.addingMarkers = FALSE
 
 # Add the "add markers" button to the map
 map <- htmlwidgets::onRender(map, '
   function(el, x) {
     var map = this;
     map.on("click", function(e) {
       var coord = e.latlng;
       var marker = L.marker(coord).addTo(map);
       marker.bindPopup("Latitude: " + coord.lat.toFixed(4) + "<br>Longitude: " + coord.lng.toFixed(4)).openPopup();
     });
     map.addingMarkers = false;
     map.addControl(addMarkersButton);
   }
 ')
    
 # Add a "Clear Markers" button
 my_map <- addEasyButton(
   map,
   easyButton(
     icon = "fa-trash",
     title = "Clear Markers",
     onClick = JS(
       "function(btn, map) {
         map.eachLayer(function(layer) {
           if (layer instanceof L.Marker || layer instanceof L.CircleMarker) {
             map.removeLayer(layer);
           }
         });
          map.setView([initial_view.lat, initial_view.lng],   initial_zoom);
       }"
     )
   )
 )
 
 
 # Function to export the map as an image
 exportMapJS <- 'function() {
   var map = this;
   leaflet.export(map, filename = "map.png");
 }'
 
 # Add an "Export Map" button
 my_map <- addEasyButton(
   my_map,
   easyButton(
     icon = "fa-download",
     title = "Export Map",
     onClick = JS(exportMapJS)
   )
 )
 # Print the map
 my_map
 
 }

```

# St. Joe

```{r}
map_maker(watersheds$sf[['St Joe']])

```

# NF Clearwater

```{r,message=FALSE, warning=FALSE}
map_maker(watersheds$sf[['NF Clearwater']])
```

# Grande Ronde

```{r,message=FALSE, warning=FALSE}
map_maker(watersheds$sf[['Grande Ronde']])

```

```{r}


# Create a Leaflet map
map <- leaflet() %>%
  addTiles() %>%
  setView(lng = -122.032, lat = 37.37, zoom = 10)  # Adjust the center and zoom as needed

# Function to add markers on map click
addMarkersOnMapClick <- 'function(e) {
  var map = this;
  var coord = e.latlng;
  var marker = L.marker(coord).addTo(map);
  marker.bindPopup("Latitude: " + coord.lat.toFixed(4) + "<br>Longitude: " + coord.lng.toFixed(4)).openPopup();
}'

# Create a button to toggle adding markers
addMarkersButton <- 'L.easyButton("fa-map-marker", function(btn, map) {
  if (map.addingMarkers) {
    map.addingMarkers = false;
    btn.button.style.backgroundColor = "white";
    map.off("click", addMarkersOnMapClick);
  } else {
    map.addingMarkers = true;
    btn.button.style.backgroundColor = "lightblue";
    map.on("click", addMarkersOnMapClick);
  }
}, "Add Markers")'

# Create a button to clear markers and reset the map
resetMapButton <- 'L.easyButton("fa-undo", function(btn, map) {
  map.eachLayer(function (layer) {
    if (layer instanceof L.Marker) {
      map.removeLayer(layer);
    }
  });
}, "Clear Markers")'

# Initialize the "addingMarkers" flag to false
map.addingMarkers = FALSE

# Add the "add markers" and "clear markers" buttons to the map
map <- htmlwidgets::onRender(map, '
  function(el, x) {
    var map = this;
    map.on("click", function(e) {
      var coord = e.latlng;
      var marker = L.marker(coord).addTo(map);
      marker.bindPopup("Latitude: " + coord.lat.toFixed(4) + "<br>Longitude: " + coord.lng.toFixed(4)).openPopup();
    });
    map.addingMarkers = false;
    map.addControl(addMarkersButton);
    map.addControl(resetMapButton);
  }
')

# Render the map
map

```
