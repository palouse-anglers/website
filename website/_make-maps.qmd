---
execute: 
  echo: false
  warning: false
---

```{r}
#| warning: false

library(leaflet)
library(htmltools)
library(httr)
library(leaflet.providers)
library(leaflet.extras)
library(tidyverse)
library(geojsonsf)
library(sf)
```


```{r}

#| warning: false

# Campgrounds
campgrrounds_url <- "https://gis2.idaho.gov/arcgis/rest/services/ADM/Campgrounds/MapServer/0/query"

tent_icon <- makeIcon(
  iconUrl = "images/tent-48.png",
  iconWidth = 40, iconHeight = 40
)


params <- list(
  where = "1=1",
  outFields = "*",
  f = "geojson",
  outSR = 4326
)

response <- GET(campgrrounds_url, query = params)

content_text <- content(response, "text", encoding = "UTF-8")

campgrounds_sf <- st_read(content_text, quiet = TRUE)


popup_table <- map_chr(seq_len(nrow(campgrounds_sf)), function(i) {
    
  row_data <- campgrounds_sf[i, ]
   
     url <- row_data$URL
     
    website_link <- if (is.na(url) || url == "") {
    
    search_term <- paste(campgrounds_sf[i,'NAME'],campgrounds_sf[i,'COUNTY'],"Idaho")
    google_search <- paste("https://www.google.com/search?q=",search_term)
    
    as.character(tags$a(href =google_search, target = "_blank", "Google Results"))
    
  } else {
    as.character(tags$a(href = url, target = "_blank", "Visit Website"))
  }
  
    
    table_content <- tagList(
       
    tags$style("
      .custom-popup {
        font-family: Arial, sans-serif;
        border-radius: 5px;
        border: 1px solid #ccc;
        padding: 10px;
        background-color: #f9f9f9;
      }
      .custom-popup table {
        width: 100%;
      }
      .custom-popup td {
        padding: 4px;
      }
      .custom-popup a {
        color: #007bff;
        text-decoration: none;
      }
    "),
    tags$div(class = 'custom-popup',
    tags$table(
            tags$tr(tags$td("Name:"), tags$td(row_data$NAME)),
            tags$tr(tags$td("Type:"), tags$td(row_data$Type)),
            tags$tr(tags$td("Rate:"), tags$td(row_data$Rate)),
            tags$tr(tags$td("Season:"), tags$td(row_data$Season))
        ),
        HTML(website_link)
    )
  )
    
    as.character(table_content)
})


```


```{r}
#| warning: false

# Watersheds
watersheds <- data.frame(
  Name=c("St Joe","NF CDA","Lochsa","Grande Ronde","NF Clearwater"),
  HUC8=c("17010304","17010301","17060303","17060106","17060308" )) %>%
  # Rest api national map
  mutate(url=paste0("https://hydro.nationalmap.gov/arcgis/rest/services/wbd/MapServer/4/query?where=HUC8+%3D+%27",HUC8,"%27+&text=&objectIds=&time=&geometry=&geometryType=esriGeometryPolygon&inSR=&spatialRel=esriSpatialRelContains&distance=&units=esriSRUnit_Foot&relationParam=&outFields=&returnGeometry=true&returnTrueCurves=false&maxAllowableOffset=&geometryPrecision=&outSR=&havingClause=&returnIdsOnly=false&returnCountOnly=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&returnZ=false&returnM=false&gdbVersion=&historicMoment=&returnDistinctValues=false&resultOffset=&resultRecordCount=&returnExtentOnly=false&datumTransformation=&parameterValues=&rangeValues=&quantizationParameters=&featureEncoding=esriDefault&f=geojson"),
         # Convert to sf
         sf = map(url,  ~ geojson_sf(.x)) %>%
           set_names(Name)
         )

    
 


map_maker <- function(sf_map){
  
opt <- leaflet::WMSTileOptions(format="image/png32", version="1.3.0", minZoom=3, maxZoom=16,transparent = TRUE)

# Get the coordinates of each polygon (watershed) centroid
centroid_lng = st_coordinates(st_centroid(sf_map))[1]
centroid_lat = st_coordinates(st_centroid(sf_map))[2]
  
 map <- leaflet() %>%
   addTiles() %>%
  setView(lng = centroid_lng, lat = centroid_lat, zoom = 9) %>% 
addWMSTiles(baseUrl = "https://basemap.nationalmap.gov/arcgis/services/USGSHydroCached/MapServer/WMSServer?",layers="0",options = opt,group="Waterways") %>%
 addProviderTiles("Esri.WorldImagery", group="Imagery") %>%
  addProviderTiles("CartoDB.DarkMatter", group="Dark")%>%
 addProviderTiles("Esri.NatGeoWorldMap", group="Topo") %>%
 addProviderTiles("OpenStreetMap", group="Street") %>%
 addPolygons(data= sf_map,group = sf_map$name,fillOpacity = 0) %>%
    addMarkers(
    popup = popup_table,
    data = campgrounds_sf,
    label = ~NAME,
    icon = tent_icon,
    group = "Campgrounds"
) %>%
  addSearchOSM() %>%
  addLayersControl(overlayGroups = c(sf_map$name,"Waterways","Campgrounds"),
baseGroups = c("Imagery","Dark","Topo","Street"))%>%
   leaflet.extras::addFullscreenControl() %>%
   leafem::addMouseCoordinates() %>% 
   hideGroup(c("Waterways","Campgrounds")) 


 #Function to add markers on map click
 addMarkersOnMapClick <- 'function(e) {
   var map = this;
   var coord = e.latlng;
   var marker = L.marker(coord).addTo(map);
   marker.bindPopup("Latitude: " + coord.lat.toFixed(4) + "<br>Longitude: " + coord.lng.toFixed(4)).openPopup();
 }'
  
 # Function to add markers with custom labels
 addMarkersOnMapClick <- 'function(e) {
   var map = this;
   var coord = e.latlng;
   var marker = L.marker(coord, {
     icon: L.divIcon({
       className: "custom-marker-label",
       html: "Marker ID: " + map.markerID + "<br>Latitude: " + coord.lat.toFixed(4) + "<br>Longitude: " + coord.lng.toFixed(4)
   })
 }).addTo(map);
 map.markerID++;
}'

# Create a button to toggle adding markers
addMarkersButton <- 'L.easyButton("fa-map-marker", function(btn, map) {
   if (map.addingMarkers) {
     map.addingMarkers = false;
     btn.button.style.backgroundColor = "white";
     map.off("click", addMarkersOnMapClick);
   } else {
     map.addingMarkers = true;
     btn.button.style.backgroundColor = "lightblue";
     map.on("click", addMarkersOnMapClick);
   }
 }, "Add Markers")'
 
 # Initialize the "addingMarkers" flag to false
 map.addingMarkers = FALSE
 
 # Add the "add markers" button to the map
 map <- htmlwidgets::onRender(map, '
   function(el, x) {
     var map = this;
     map.on("click", function(e) {
       var coord = e.latlng;
       var marker = L.marker(coord).addTo(map);
       marker.bindPopup("Latitude: " + coord.lat.toFixed(4) + "<br>Longitude: " + coord.lng.toFixed(4)).openPopup();
     });
     map.addingMarkers = false;
     map.addControl(addMarkersButton);
   }
 ')
    
 # Add a "Clear Markers" button
 my_map <- addEasyButton(
   map,
   easyButton(
     icon = "fa-trash",
     title = "Clear Markers",
     onClick = JS(
       "function(btn, map) {
         map.eachLayer(function(layer) {
           if (layer instanceof L.Marker || layer instanceof L.CircleMarker) {
             map.removeLayer(layer);
           }
         });
          map.setView([initial_view.lat, initial_view.lng],   initial_zoom);
       }"
     )
   )
 )
 
 # Print the map

 my_map
 
 }

```



